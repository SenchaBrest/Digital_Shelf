import time
import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from Recognition.crop import crop
from Recognition.db import db

import algo
from config import TOKEN, yoloPath

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ö–æ–≥–¥–∞ –ø—Ä–∏—à–ª–µ—à—å —Ñ–æ—Ç–æ, —è –¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                        "–°–∫–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–π —Ü–µ–Ω–Ω–∏–∫–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n"
                        "–°–∫–æ–ª—å–∫–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª–æ–∫, –∞ —Ç–∞–∫ –∂–µ –∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")


@dp.message_handler(content_types=['photo'])
async def process_photo_command(message: types.Message):
    file_path = f"""{time.strftime("%Y%m%d%H%M%S")}ID{message.from_user.id}.jpg"""

    await message.photo[-1].download(file_path)
    await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    algo.open_image(file_path)

    os.system(
        f"python {yoloPath}detect.py --weights {yoloPath}tags.pt --conf 0.50 --img-size 640 --source {file_path} "
        f"--save-txt --classes 1 0 ")  # —Ü–µ–Ω–Ω–∏–∫–∏
    if not os.path.exists(f"detect_res/tags/labels/{file_path.replace('.jpg', '.txt')}"):
        await bot.send_message(message.chat.id, "–£–ø—Å. –ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç —Å—Ç–µ–ª–ª–∞–∂–∞.")
        return
    await bot.send_photo(message.chat.id, open(f"detect_res/tags/{file_path}", 'rb'))

    os.system(
        f"python {yoloPath}detect.py --weights {yoloPath}3.pt {yoloPath}4.pt {yoloPath}5.pt {yoloPath}6.pt --conf 0.80 --img-size 640 --source {file_path} "
        f"--save-txt")  # –æ–±—ä–µ–∫—Ç—ã

    p_to_photo_obj = crop(file_path, f"detect_res/objects/labels/{file_path.replace('.jpg', '.txt')}")
    await bot.send_photo(message.chat.id, open(p_to_photo_obj, 'rb'))

    algo.preparePhoto(labelOfPrices=f"detect_res/tags/labels/{file_path.replace('.jpg', '.txt')}",
                      labelOfProducts=f"res_rec_obj.txt")

    countOfShelves, Shelves = algo.calcShelvesCount()
    algo.fillShelvesByPrices()
    algo.fillShelvesByProducts()
    # algo.removeBackLayout()
    lengths = algo.calcLengthOfLayout()
    tags = algo.calcTagsCount()
    prices = algo.calcPricesCount()

    await bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫: {countOfShelves}.\n")
    await bot.send_message(message.chat.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(tags)}.\n")

    sendMessage = f"üè∑–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–Ω–∏–∫–æ–≤:üè∑\n"
    for price in prices:
        sendMessage += f"‚ñ∏ {price}: {prices[price]}\n"
    await bot.send_message(message.chat.id, sendMessage)

    sendMessage = f"üìè–î–ª–∏–Ω–∞ –ø–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –≤—ã–∫–ª–∞–¥–∫–∏:üìè\n"
    for i in range(len(Shelves)):
        sendMessage += f"{i + 1} –ø–æ–ª–∫–∞\n{10 * '‚Äî'}\n"
        for length in lengths[i]:
            sendMessage += f"‚ñ∏ {db[length[0]]} {length[1]} —Å–º;\n"
        sendMessage += "\n"
    await bot.send_message(message.chat.id, sendMessage)

    sendMessage = "üõí–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:üõí\n"
    for tag in tags:
        sendMessage += f"‚ñ∏ {db[tag]}: {tags[tag]}\n"
    await bot.send_message(message.chat.id, sendMessage)

    algo.findVoids()
    errorsPath = algo.findMistakes()
    await bot.send_photo(message.chat.id, open(errorsPath, 'rb'))

    algo.clear()


if __name__ == '__main__':
    executor.start_polling(dp)
